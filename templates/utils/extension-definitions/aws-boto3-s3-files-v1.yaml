---
kind: AnimusExtensionTemplate
version: v1
metadata:
  name: aws-boto3-s3-files-v1
  skipDeleteAll: true
  executeOnlyOnceOnApply: true
  executeOnlyOnceOnDelete: true
spec:
  description: |
    Synchronizes files to an S3 bucket (apply action) or deletes the files in an S3 bucket (delete action).

    It is important that the bucket remain under control of Animus (both through `AwsBoto3S3Bucket` amd `AwsBoto3S3Files`)
    to avoid inconsistencies or loss of dat or data corruption.

    The intent of this facility is to keep file synchronized that are required for IaC activities. Ir was not really meant
    for uploading or synchronizing a large amount of files. Consider using the AWS CLI tool
    [aws s3 sync](https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html) for bulk file uploads (1000+ files)

    When the apply action is complete the following variable will be set:

    * `:SYNC_RESULT` - Set to the string `ALL_OK`` when done.
    * `:CHECKSUM_DIFFERENCES_DETECTED` - Boolean value which will only be present if some files or directories had the `verifyChecksums` parameter set to `true`. If this variable is `true`, it means some of the files evaluated did have a mismatch in checksum and was re-uploaded. If the `verifyChecksums` parameter was never used, this variable may be absent or have a value of `False`

    Both individual files, or entire directory contents can be uploaded.

    There are several strategies that can be followed:

    * Ignore the current files in the bucket, and just overwrite all of them
    * A longer process can first get the checksum of each remote file and compare it with the local file and only upload the differences.

    Restrictions:

    * Please be aware of file and directory (a.k.a. "key") [naming conventions and restriction](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) for S3.
    * Be aware of the AWS S3 [service quotas](https://docs.aws.amazon.com/general/latest/gr/s3.html)
    * It is encouraged to re-use the same `AwsBoto3Session` that was used to create the S3 bucket. This will avoid potential issues with end-point usage etc.
  kind: AwsBoto3S3Files
  version: v1
  versionChangelog: |
    This is the initial version
  supportedVersions:
  - 'v1'
  baseClass: ManifestBase
  # outputPaths:              # If any of these are null/NoneType, the global defaults will be used (which is this repo)
  #   doc: /tmp/aws-boto3-s3-files-v1/doc
  #   examples: /tmp/aws-boto3-s3-files-v1/examples
  #   implementations: /tmp/aws-boto3-s3-files-v1/impl
  pipRequirements:
  - 'py-animus'
  - 'boto3'
  importStatements:
  - 'from py_animus.manifest_management import *'
  - 'from py_animus import get_logger, get_utc_timestamp'
  - 'import traceback'
  - 'import boto3'
  - 'import os'
  - 'import shutil'
  - 'import tempfile'
  - 'from pathlib import Path'
  - 'import re'
  - 'import hashlib'
  specFields:
  - fieldName: awsBoto3Session
    fieldDescription: |
      The name of the `awsBoto3Session`. The appropriate variable name will be derived from this name.
    fieldType: str
    fieldRequired: true
    fieldDefaultValue: 'set-me-please'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: s3Bucket
    fieldDescription: |
      The name of the `AwsBoto3S3Bucket` used to manage the S3 bucket. The bucket name will be obtained from this manifest. The bucket name will be in the variable `AwsBoto3S3Bucket:manifest-name:target-environment:NAME` from the `AwsBoto3S3Bucket` manifest
    fieldType: str
    fieldRequired: true
    fieldDefaultValue: 'set-me-please'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: globalOverwrite
    fieldDescription: |
      If this parameter is present and is set to `True`, all selected files and directories will be uploaded regarded if they already exists or not. This is by far the fastest operation, and resembled the `aws s3 sync` functionality.
    fieldType: bool
    fieldRequired: false
    fieldDefaultValue: false
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: destinationDirectory
    fieldDescription: |
      The destination directory. If not set, the default would be the bucket root (`/`) directory.
    fieldType: str
    fieldRequired: false
    fieldDefaultValue: '/'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: localStagingDirectory
    fieldDescription: |
      Only required if `verifyChecksums` parameter is used. If the `verifyChecksums` parameter is used and this temporary
      location is not specified, one will be determined programmatically at run time. If the target directory does not exist,
      an attempt will be made to create it. Post processing, the directory content will be deleted, but the directory will
      remain.
    fieldType: str
    fieldRequired: false
    fieldDefaultValue: ''
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: sources
    fieldDescription: |
      A collection (list) of files and/or directories to upload to S3
    fieldType: list
    fieldRequired: true
    fieldDefaultValue: []
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: ifFileExists.overWrite
    fieldDescription: |
      If set to `False` (default), any existing files will just be skipped, _**unless**_ the `verifyChecksums` parameter is
      also used, which will overwrite the file if the checksum mismatches. If set to `True`, the file will be uploaded
      regardless if it already exists or not and regardless of the `verifyChecksums` parameter.  Therefore, when using the
      `verifyChecksums` parameter, it is best to keep this value `False`.
    fieldType: bool
    fieldRequired: true
    fieldDefaultValue: false
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: onError
    fieldDescription: |
      The only excepted values is `warn` (just create a warning log entry and carry on) and `exception` which will halt the
      apply action with an exception.
    fieldType: str
    fieldRequired: true
    fieldDefaultValue: 'warn'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')
  - fieldName: actionExtraFilesOnS3
    fieldDescription: |
      The only excepted values is `keep` (basically ignoring existing files on S3) and `delete` which will remove all files on
      the S3 bucket not found in the local file map. For consistency, the default is `delete` and it is also the recommended
      setting for a managed bucket.
    fieldType: str
    fieldRequired: true
    fieldDefaultValue: 'delete'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      self.log(message='No custom validation for promptText', level='debug')

