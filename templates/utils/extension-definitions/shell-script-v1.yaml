---
kind: AnimusExtensionTemplate
version: v1
metadata:
  name: shell-script-v1
  skipDeleteAll: false          # TODO: Once the implementation is done, we can set this to `true`
  executeOnlyOnceOnApply: true
  executeOnlyOnceOnDelete: true
spec:
  description: |
    Executes a shell script.

    Output from STDOUT will be stored in a `Variable` with `:STDOUT` appended to the 
    variable name

    Output from STDERR will be stored in a `Variable` with `:STDERR` appended to the
    variable name

    Both STDOUT and STDERR will be stored as strings. No output will result in an
    empty sting.

    The exit status will be stored in a `Variable` with `:EXIT_CODE` appended to the
    variable name
  kind: ShellScript
  version: v1
  versionChangelog: |
    This is the initial version
  supportedVersions:
  - 'v1'
  baseClass: ManifestBase
  pipRequirements:
  - 'py-animus'
  importStatements:
  - 'from py_animus.manifest_management import *'
  - 'from py_animus import get_logger'
  - 'import traceback'
  - 'from pathlib import Path'
  - 'import subprocess'
  specFields:
  - fieldName: shellInterpreter
    fieldDescription: |
      The shell interpreter to select in the shabang line. Supported values: `sh`, `zsh`, `perl`, `python` and `bash`
    fieldType: str
    fieldRequired: false
    fieldDefaultValue: 'sh'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      SUPPORTED_SHELLS = ('sh','zsh','bash','perl','python',)
      self.log(message='Validating shabang type', level='debug')
      if self.spec['promptCharacter'] not in SUPPORTED_SHELLS:
        raise Exception('Unsupported shell. Must be one of {}'.format(SUPPORTED_SHELLS))
  - fieldName: source
    fieldDescription: |
      Defines the script source
    fieldType: dict
    fieldRequired: true
    fieldDefaultValue: null
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: false
    - fieldValueTypeMismatch: false
    - fieldValueIsNull: false
    customValidation: pass
  - fieldName: source.type
    fieldDescription: |
      Select the source type, which can be either `filePath` that points to an 
      existing script file on the local file system, or `inLine` with the script 
      source defined in the `spec.source.value` field
    fieldType: str
    fieldRequired: false
    fieldDefaultValue: 'inLine'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      SUPPORTED_TYPES = ('inLine', 'filePath',)
      self.log(message='Validating source.type value', level='debug')
      if self.spec['source']['type'] not in SUPPORTED_TYPES:
        raise Exception('Unsupported `spec.source.value`. Must be one of {}'.format(SUPPORTED_TYPES))
  - fieldName: source.value
    fieldDescription: |
      If `spec.source.type` has a value of `inLine` then the value here will be 
      assumed to be the script content of that type. if `spec.source.type` has a value
      of `filePath` then this value must point to an existing file on the local filesystem
    fieldType: str
    fieldRequired: false
    fieldDefaultValue: 'echo "Not Yet Implemented"'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
    customValidation: |
      if self.spec['source']['type'] == 'filePath':
        script_file = Path(self.spec['source']['value'])
        if script_file.is_file() is False:
            raise Exception('Expected file "{}" to exist'.format(self.spec['source']['value']))
  - fieldName: workDir.path
    fieldDescription: |
      An optional path to a working directory. The extension will create 
      temporary files (if needed) in this directory and execute them from here.
    fieldType: str
    fieldRequired: false
    fieldDefaultValue: '/tmp/py-animus-shell-script-workdir'
    fieldSetDefaultValueConditions:
    - fieldDefinitionNotPresentInManifest: true
    - fieldValueTypeMismatch: true
    - fieldValueIsNull: true
  additionalExamples:
  - exampleName: minimal  # This will also be used to compile the the value of metadata.name
    manifest:
      generated: true # This will automatically generate an example spec data with the minimum required fields and default values
      additionalMetadata: |
        skipDeleteAll: true
    explanatoryText: |
      This is the absolute minimal example based on required values. Dummy random data was generated where required.
  - exampleName: docker-check
    manifest:
      generated: false  # The kind, version and metadata (name only) will be autogenerated. Spec data needs to be supplied and additional metadata can be added
      specData: |
        shellInterpreter: bash
        source:
          value: |
            docker --version
      additionalMetadata: |
        skipDeleteAll: true
    explanatoryText: |
      This example runs the command `docker --version` and will store the result in the variable named
      
